// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  POLISH
  GEL_COLOR
  GEL_BASE
  GEL_TOP
}

enum NailLength {
  SHORT
  MEDIUM
  LONG
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model Store {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String    @unique
  address       String?   
  phone         String?   
  adminEmail    String    @unique
  products      Product[]
  users         User[]    
  serviceTypes  ServiceType[]
  invitations   Invitation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  name        String
  role        Role      @default(STAFF)
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  // 既存のフィールド保持
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  brand       String
  productName String
  colorCode   String
  colorName   String
  opacity     Float     @default(1)  // 透明度（0-1）
  type        Type
  price       Float
  
  // 容量関連フィールド（既存）
  capacity         Float?    
  capacityUnit     String?  
  averageUsePerService Float?
  
  // ロット管理用の新フィールド
  totalQuantity    Int       @default(1)    // 総在庫数
  inUseQuantity    Int       @default(0)    // 使用中の数
  lotQuantity      Int       @default(1)    // 未使用のロット数
  
  // 使用中商品の管理用の新フィールド
  currentProductLots ProductLot[]   // 使用中と未使用の商品ロット
  
  // アラート関連（既存を活用）
  recommendedAlertPercentage Int    @default(20)
  minStockAlert    Int       @default(5)
  
  // 既存のフィールドとリレーション
  usageCount       Int       @default(0)
  lastUsed         DateTime?
  averageUsesPerMonth Float?
  estimatedDaysLeft  Int?
  usages           Usage[]
  relatedUsages    RelatedProductUsage[]
  serviceTypeProducts ServiceTypeProduct[]
  store            Store     @relation(fields: [storeId], references: [id])
  storeId          String    @db.ObjectId
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// 新規モデル: 商品ロット管理
model ProductLot {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  
  isInUse       Boolean   @default(false)  // 使用中かどうか
  currentAmount Float?                      // 現在の残量（使用中の場合のみ）
  startedAt     DateTime? // 使用開始日

  // 使用記録との関連を追加
  usages        Usage[]              // メイン使用記録
  relatedUsages RelatedProductUsage[] // 関連使用記録
  
  createdAt     DateTime  @default(now())  // ロット追加日
  updatedAt     DateTime  @updatedAt
}

model ServiceType {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  defaultUsageAmount Float
  productType     Type

  // ジェル施術のための追加フィールド
  isGelService    Boolean   @default(false)
  requiresBase    Boolean   @default(false)
  requiresTop     Boolean   @default(false)
  
  // 爪の長さごとの使用量調整係数
  shortLengthRate   Int     @default(80)
  mediumLengthRate  Int     @default(100)
  longLengthRate    Int     @default(130)
  
  allowCustomAmount Boolean @default(false)
  
  // リレーション
  serviceTypeProducts ServiceTypeProduct[] // 中間テーブルへの参照
  usages          Usage[]
  store           Store     @relation(fields: [storeId], references: [id])
  storeId         String    @db.ObjectId
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([name, storeId])
}

model ServiceTypeProduct {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  usageAmount   Float
  isRequired    Boolean   @default(true)
  productRole   String?   // "BASE", "COLOR", "TOP" などの役割を指定
  order         Int       @default(0)  // 使用順序
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([serviceTypeId, productId])
}

model Usage {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  usageAmount   Float
  nailLength    NailLength
  isCustomAmount Boolean  @default(false)
  isGelService  Boolean   @default(false)  // ジェル施術かどうか
  
  relatedUsages RelatedProductUsage[]
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId String     @db.ObjectId
  product       Product    @relation(fields: [productId], references: [id])
  productId     String     @db.ObjectId

   // 使用したロットへの参照
  usedLot      ProductLot? @relation(fields: [usedLotId], references: [id])
  usedLotId    String?    @db.ObjectId
  
  note          String?
  createdAt     DateTime   @default(now())
}

model RelatedProductUsage {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  usage         Usage     @relation(fields: [usageId], references: [id])
  usageId       String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
  productId     String    @db.ObjectId
  amount        Float

  // 使用順序と役割の追加
  order         Int       @default(0)
  role          String?   // "BASE", "COLOR", "TOP"
  
  // 使用したロットへの参照
  usedLot      ProductLot? @relation(fields: [usedLotId], references: [id])
  usedLotId    String?    @db.ObjectId
  
  createdAt     DateTime  @default(now())
}

model Invitation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       String    @unique
  email       String?
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id])
  role        Role      @default(STAFF)
  expires     DateTime
  used        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}